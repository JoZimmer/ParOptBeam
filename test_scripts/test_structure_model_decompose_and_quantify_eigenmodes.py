import unittest
import mock
import numpy as np
from scipy import linalg
from source.model.structure_model import StraightBeam
import source.auxiliary.global_definitions as GD

class test_structure_model_decompose_and_qunatify_eigenmodes(unittest.TestCase):
    
    def create_mock_self_for_contribution (self):
        #fixed-free, 3 elements, length = 25m total, Crossection = 0.2*0.4m 
        mock_self = mock.MagicMock()
        mock_self.eig_freqs_sorted_indices = np.array([0,1,2,3])
        mock_self.dofs_to_keep = np.array([0])
        mock_self.dofs_to_keep_labels = ['x','y','z','a','b','g','x','y','z','a','b','g','x','y','z','a','b','g']
        mock_self.domain_size = '3D'
        # the following modes are used: 0: y,g; 1: z,b; 2: y,g; 3: z,b
        mock_self.eigen_modes_raw = np.transpose(np.array([
            [-3.53420556e-19,  2.64273487e-03,  1.29912597e-15, -1.59111385e-17,
       -2.71800292e-16,  5.77605873e-04, -1.08214410e-18,  8.73177931e-03,
        3.91878239e-15, -9.15042620e-18, -3.37783124e-16,  8.35876540e-04,
       -8.29377036e-19,  1.59648033e-02,  6.77542872e-15, -1.63051024e-17,
       -3.43633119e-16,  8.79030406e-04],
       [ 1.63043899e-19,  5.26794674e-17, -2.64260949e-03, -3.38103209e-17,
        5.77581009e-04,  1.16086119e-16,  3.25122146e-19,  3.06798740e-15,
       -8.73143146e-03, -3.94666690e-17,  8.35850673e-04,  5.96004734e-16,
        2.41622465e-19,  8.79620855e-15, -1.59642640e-02, -6.43799119e-17,
        8.79009436e-04,  7.20417728e-16],
        [ 8.50278725e-19, -9.47259158e-03, -2.27417061e-16, -1.53828196e-19,
       -4.02362479e-19, -1.13287595e-03,  3.89298388e-18, -6.80078539e-03,
        6.23807481e-16,  6.15312785e-19, -2.06594808e-16,  1.90094927e-03,
        1.84931591e-18,  1.60586162e-02,  2.73381426e-15,  2.80459483e-18,
       -2.73472984e-16,  3.07376015e-03],
       [-4.77395127e-19, -2.91673163e-16,  9.46986499e-03,  3.36853585e-17,
       -1.13268616e-03, -8.64416426e-17, -9.51962808e-19, -7.61912608e-16,
        6.80059119e-03,  3.99665189e-17,  1.90025995e-03,  6.35217063e-17,
       -2.72091371e-18,  1.08501453e-15, -1.60535086e-02,  4.73817587e-17,
        3.07326097e-03,  2.92189015e-16]]))
        mock_self.charact_length = 0.3
        mock_self.n_elements = 3
        mock_self.parameters = {
            'lz': [0.4, 0.4, 0.4, 0.4],
            'ly': [0.2, 0.2, 0.2, 0.2],
            'lx': 25.0,
            'm': [2616.6666666666665, 5233.333333333333, 5233.333333333334, 2616.6666666666674],
            'rho': 7850.0
        } 
        mock_self.parameters['m_tot'] = sum(mock_self.parameters['m'])
        mock_self.comp_m = np.array([[ 3.48888889e+03,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         8.72222222e+02,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
       [ 0.00000000e+00,  3.88822200e+03,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  6.72555665e+02,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00, -1.34965837e+03,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
       [ 0.00000000e+00,  0.00000000e+00,  3.89003064e+03,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  6.71651345e+02,
         0.00000000e+00,  1.34903037e+03,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
       [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         5.81510556e+01,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         1.45377639e+01,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
       [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  6.94100658e+03,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00, -1.34903037e+03,
         0.00000000e+00, -2.59822547e+03,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
       [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  6.92705102e+03,
         0.00000000e+00,  1.34965837e+03,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00, -2.59648103e+03,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
       [ 8.72222222e+02,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         3.48888889e+03,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         8.72222222e+02,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
       [ 0.00000000e+00,  6.72555665e+02,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  1.34965837e+03,
         0.00000000e+00,  3.88822200e+03,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  1.36424205e-12,
         0.00000000e+00,  6.72555665e+02,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00, -1.34965837e+03],
       [ 0.00000000e+00,  0.00000000e+00,  6.71651345e+02,
         0.00000000e+00, -1.34903037e+03,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  3.89003064e+03,
         0.00000000e+00, -1.36424205e-12,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  6.71651345e+02,
         0.00000000e+00,  1.34903037e+03,  0.00000000e+00],
       [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         1.45377639e+01,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         5.81510556e+01,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         1.45377639e+01,  0.00000000e+00,  0.00000000e+00],
       [ 0.00000000e+00,  0.00000000e+00,  1.34903037e+03,
         0.00000000e+00, -2.59822547e+03,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00, -1.36424205e-12,
         0.00000000e+00,  6.94100658e+03,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00, -1.34903037e+03,
         0.00000000e+00, -2.59822547e+03,  0.00000000e+00],
       [ 0.00000000e+00, -1.34965837e+03,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00, -2.59648103e+03,
         0.00000000e+00,  1.36424205e-12,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  6.92705102e+03,
         0.00000000e+00,  1.34965837e+03,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00, -2.59648103e+03],
       [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         8.72222222e+02,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         1.74444444e+03,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
       [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  6.72555665e+02,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  1.34965837e+03,
         0.00000000e+00,  1.94411100e+03,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00, -2.28460089e+03],
       [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  6.71651345e+02,
         0.00000000e+00, -1.34903037e+03,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  1.94501532e+03,
         0.00000000e+00,  2.28522889e+03,  0.00000000e+00],
       [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         1.45377639e+01,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         2.90755278e+01,  0.00000000e+00,  0.00000000e+00],
       [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  1.34903037e+03,
         0.00000000e+00, -2.59822547e+03,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  2.28522889e+03,
         0.00000000e+00,  3.47050329e+03,  0.00000000e+00],
       [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00, -1.34965837e+03,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00, -2.59648103e+03,
         0.00000000e+00, -2.28460089e+03,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  3.46352551e+03]])

        mock_self.contribution_matlab_solution = np.array([
         1.40847726655857e-18, 0.0183875762926860,
         7.93416776013108e-15, 7.36529628089789e-18,
         1.65967135981115e-16, 0.000403052270851696])
        return mock_self

    @mock.patch('source.model.structure_model.StraightBeam.eigenvalue_solve')
    def test_contribution_matlab (self,mock_eigenvalue_solve):
      mock_self = self.create_mock_self_for_contribution()
      StraightBeam.decompose_and_quantify_eigenmodes(mock_self) 
      for [idx,label] in zip(range(len(GD.DOF_LABELS['3D'])),GD.DOF_LABELS['3D']):
        # self.assertEqual(mock_self.decomposed_eigenmodes['rel_contribution'][0],{label: mock_self.charact_length * linalg.norm(mock_self.eigen_modes_raw[idx:(13+idx):6][:,0])})
        self.assertIsNone(np.testing.assert_allclose(mock_self.decomposed_eigenmodes['rel_contribution'][0][label], mock_self.contribution_matlab_solution[idx]))

    
    @mock.patch('source.model.structure_model.StraightBeam.eigenvalue_solve')
    def test_modal_mass_analytic_values (self,mock_eigenvalue_solve):
        mock_self = self.create_mock_self_for_contribution()

        mock_self.eig_freqs_sorted_indices = np.array([0,1,2,3])
        
        # calculate the first 4 modes
        mock_self.dofs_to_keep = np.array([0,0,0,0])
        n_modes = len(mock_self.dofs_to_keep)

        density = 7850.0
        length = 25.0

        # following Tom Irvine (D-70), first two modes of bending y and z
        analytic_results = density*mock_self.parameters['ly'][0]*mock_self.parameters['lz'][0]*length*np.array([0.6131,0.1883,0.6131,0.1883])
        StraightBeam.decompose_and_quantify_eigenmodes(mock_self) 

        m_eff=np.zeros(n_modes,)
        for mode in range(n_modes):
            for label in GD.DOF_LABELS[mock_self.domain_size]:
                m_eff[mode] += mock_self.decomposed_eigenmodes['eff_modal_mass'][mode][label]
            msg = '--mode ' + str(mode) + '------------ \n'
            msg += 'analytic = ' + str(analytic_results[mode]) + '\n'
            msg += 'FEM =' + str(m_eff[mode]) + '\n'
            print(msg)
            self.assertIsNone(np.testing.assert_allclose(m_eff[mode],analytic_results[mode],rtol=1e-1, atol=1000000))





if __name__ == "__main__":
    unittest.main()