import unittest
import mock
import numpy as np
from scipy import linalg
from source.model.structure_model import StraightBeam
import source.auxiliary.global_definitions as GD

class test_structure_model_decompose_and_qunatify_eigenmodes(unittest.TestCase):
    
    def create_mock_self_for_contribution (self):
        #fixed-free, 3 elements, length = 25m total, Crossection = 0.2*0.4m 
        mock_self = mock.MagicMock()
        mock_self.eig_freqs_sorted_indices = np.array([0])
        mock_self.dofs_to_keep = np.array([0])
        mock_self.dofs_to_keep_labels = ['x','y','z','a','b','g','x','y','z','a','b','g','x','y','z','a','b','g']
        mock_self.domain_size = '3D'
        mock_self.eigen_modes_raw = np.array([
        [-3.53420556e-19], [1.63043899e-19],  [8.50278725e-19],  [-4.77395127e-19],
        [-9.19617850e-19], [-2.30959794e-33], [-4.39066387e-19], [2.25363084e-19],
        [-5.55596213e-20], [9.83695305e-20],  [1.73710162e-34],  [3.33840178e-20],
        [-3.83894809e-20], [1.77468855e-35],  [5.77372089e-03],  [-1.25517271e-20],
        [-1.38232703e-02], [-9.17897402e-03]])
        print(mock_self.eigen_modes_raw)
        mock_self.charact_length = 0.3
        mock_self.n_elements = 3
        mock_self.parameters['m'] = [2616.6666666666665, 5233.333333333333, 5233.333333333334, 2616.6666666666674]
        mock_self.parameters['m-tot'] = sum(mock_self.parameters['m'])
        mock_self.comp_m = np.array([[ 3.48888889e+03,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         8.72222222e+02,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
       [ 0.00000000e+00,  3.88822200e+03,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  6.72555665e+02,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00, -1.34965837e+03,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
       [ 0.00000000e+00,  0.00000000e+00,  3.89003064e+03,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  6.71651345e+02,
         0.00000000e+00,  1.34903037e+03,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
       [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         5.81510556e+01,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         1.45377639e+01,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
       [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  6.94100658e+03,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00, -1.34903037e+03,
         0.00000000e+00, -2.59822547e+03,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
       [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  6.92705102e+03,
         0.00000000e+00,  1.34965837e+03,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00, -2.59648103e+03,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
       [ 8.72222222e+02,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         3.48888889e+03,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         8.72222222e+02,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
       [ 0.00000000e+00,  6.72555665e+02,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  1.34965837e+03,
         0.00000000e+00,  3.88822200e+03,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  1.36424205e-12,
         0.00000000e+00,  6.72555665e+02,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00, -1.34965837e+03],
       [ 0.00000000e+00,  0.00000000e+00,  6.71651345e+02,
         0.00000000e+00, -1.34903037e+03,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  3.89003064e+03,
         0.00000000e+00, -1.36424205e-12,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  6.71651345e+02,
         0.00000000e+00,  1.34903037e+03,  0.00000000e+00],
       [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         1.45377639e+01,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         5.81510556e+01,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         1.45377639e+01,  0.00000000e+00,  0.00000000e+00],
       [ 0.00000000e+00,  0.00000000e+00,  1.34903037e+03,
         0.00000000e+00, -2.59822547e+03,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00, -1.36424205e-12,
         0.00000000e+00,  6.94100658e+03,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00, -1.34903037e+03,
         0.00000000e+00, -2.59822547e+03,  0.00000000e+00],
       [ 0.00000000e+00, -1.34965837e+03,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00, -2.59648103e+03,
         0.00000000e+00,  1.36424205e-12,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  6.92705102e+03,
         0.00000000e+00,  1.34965837e+03,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00, -2.59648103e+03],
       [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         8.72222222e+02,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         1.74444444e+03,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
       [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  6.72555665e+02,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  1.34965837e+03,
         0.00000000e+00,  1.94411100e+03,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00, -2.28460089e+03],
       [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  6.71651345e+02,
         0.00000000e+00, -1.34903037e+03,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  1.94501532e+03,
         0.00000000e+00,  2.28522889e+03,  0.00000000e+00],
       [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         1.45377639e+01,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         2.90755278e+01,  0.00000000e+00,  0.00000000e+00],
       [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  1.34903037e+03,
         0.00000000e+00, -2.59822547e+03,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  2.28522889e+03,
         0.00000000e+00,  3.47050329e+03,  0.00000000e+00],
       [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00, -1.34965837e+03,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00, -2.59648103e+03,
         0.00000000e+00, -2.28460089e+03,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  3.46352551e+03]])
        mock_self.parameters['lz'] = [0.4, 0.4, 0.4, 0.4]
        mock_self.parameters['ly'] = [0.2, 0.2, 0.2, 0.2]
        mock_self.contribution_matlab_solution = np.array([
          5.64941708356140e-19, 2.78157927500032e-19,
          0.00577372089000000, 1.46275833923651e-19,
          0.00414698109000000, 0.00275369220600000])
        return mock_self

    @mock.patch('source.model.structure_model.StraightBeam.eigenvalue_solve')
    def test_contribution (self,mock_eigenvalue_solve):
      mock_self = self.create_mock_self_for_contribution()
      StraightBeam.decompose_and_quantify_eigenmodes(mock_self) 
      for [idx,label] in zip(range(len(GD.DOF_LABELS['3D'])),GD.DOF_LABELS['3D']):
        # self.assertEqual(mock_self.decomposed_eigenmodes['rel_contribution'][0],{label: mock_self.charact_length * linalg.norm(mock_self.eigen_modes_raw[idx:(13+idx):6][:,0])})
        self.assertIsNone(np.testing.assert_allclose(mock_self.decomposed_eigenmodes['rel_contribution'][0][label], mock_self.contribution_matlab_solution[idx]))

    
    @mock.patch('source.model.structure_model.StraightBeam.eigenvalue_solve')
    def test_modal_mass_analytic_values (self,mock_eigenvalue_solve):
      mock_self = self.create_mock_self_for_contribution()
      mock_self.eigen_modes_raw = np.transpose(np.array([[-3.53420556e-19,  1.63043899e-19,  8.50278725e-19, -4.77395127e-19,
        -9.19617850e-19, -2.30959794e-33, -4.39066387e-19,  2.25363084e-19,
        -5.55596213e-20,  9.83695305e-20,  1.73710162e-34,  3.33840178e-20,
        -3.83894809e-20,  1.77468855e-35,  5.77372089e-03, -1.25517271e-20,
        -1.38232703e-02, -9.17897402e-03],
        [ 2.64273487e-03,  5.26794674e-17, -9.47259158e-03, -2.91673163e-16,
          1.19320600e-02,  1.29433836e-17,  4.06323829e-17, -4.34821518e-03,
          4.91747865e-03,  1.85508015e-17, -5.76946328e-18, -4.21086509e-03,
        -2.98395768e-16,  1.62541114e-18,  5.34336963e-18,  1.32119892e-18,
          8.90385155e-19, -3.42870392e-23],
          [ 1.29912597e-15, -2.64260949e-03, -2.27417061e-16,  9.46986499e-03,
        -2.18261457e-16,  2.84257064e-17,  1.19275633e-02,  1.35493483e-16,
          2.11468073e-17, -4.35060924e-03, -1.79879573e-18, -3.45977425e-16,
          4.89925637e-03, -9.05913626e-19,  1.78005622e-18,  4.20033223e-03,
          0.00000000e+00,  0.00000000e+00],
          [-1.59111385e-17, -3.38103209e-17, -1.53828196e-19,  3.36853585e-17,
        -2.95547591e-17,  4.47219317e-02, -1.33315728e-16,  2.96466729e-17,
          3.55785222e-17,  4.16092660e-18,  1.07071915e-01, -2.25705095e-17,
        -1.21694608e-17, -7.10982496e-02,  0.00000000e+00, -1.72201813e-18,
          0.00000000e+00,  0.00000000e+00]]))
      mock_self.eig_freqs_sorted_indices = np.array([0,1,2,3])

      
      # calculate the first 4 modes
      mock_self.dofs_to_keep = np.array([0,0,0,0])
      n_modes = len(mock_self.dofs_to_keep)

      density = 7850.0
      length = 25.0

      analytic_results = density*mock_self.parameters['ly'][0]*mock_self.parameters['lz'][0]*length*np.array([0.6131,0.1883,0.06474,0.03306])
      StraightBeam.decompose_and_quantify_eigenmodes(mock_self) 

      m_eff=np.zeros(n_modes,)
      for mode in range(n_modes):
        for label in GD.DOF_LABELS[mock_self.domain_size]:
          m_eff[mode] += mock_self.decomposed_eigenmodes['eff_modal_mass'][mode][label]
        self.assertIsNone(np.testing.assert_allclose(m_eff[mode],analytic_results[mode]))



if __name__ == "__main__":
    unittest.main()