import numpy as np
from scipy import signal 
import matplotlib.pyplot as plt 
import source.ESWL.eswl_auxiliaries as auxiliary
from source.auxiliary.other_utilities import get_adjusted_path_string

dynamic_load_file = "input/force/generic_building/dynamic_force_4_nodes.npy"

load_signals_raw = np.load(get_adjusted_path_string(dynamic_load_file))
load_signals = auxiliary.parse_load_signal(load_signals_raw, 6, discard_time = 1000)

dt = 0.1 # simulation time step 
load_signals['sample_freq'] = 1/dt

def power_spectral_density_jth_generalized_force(load_signals):
    '''
    the power spectral density of the generalized force of the jth eigenmode
    -> is directly evaluated at the first 3 natural frequencies 
    '''
    n_nodes = 3
    load_directions = ['y','z','a']
    eig_freqs = [0.19999886472946649, 0.22999939902163516, 0.39999918947187696]
    eigenform = {'a': np.array([[ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
        [-1.20411655e-21,  3.30972686e-21,  2.58974688e-06,
            1.85829354e-20, -7.59129978e-20,  6.20029473e-06,
            -2.02918032e-36, -4.11714036e-06,  1.27156399e-21,
            1.12778513e-20,  1.79491870e-37, -9.19414967e-22,
            4.61510373e-22, -1.03161644e-22, -2.43074110e-38,
            9.79799414e-24,  1.01639297e-22,  1.01273442e-22],
        [-1.37312684e-20,  2.02734768e-20,  4.48557317e-06,
            -1.40803010e-22, -9.10242470e-22, -3.04754831e-21,
            -3.86414972e-36,  7.13109629e-06, -1.71394055e-21,
            -2.11438386e-21,  3.08369567e-38, -5.37734371e-22,
            -1.10834750e-21, -8.51971695e-22,  9.72296442e-38,
            -8.82270824e-22,  1.49822359e-23,  1.64456566e-23],
        [-1.84098613e-20,  2.55806873e-20,  5.17949376e-06,
            -1.30529074e-20,  6.39937988e-20, -6.20029473e-06,
            9.81399251e-36, -8.23428072e-06,  1.02823319e-21,
            1.94872831e-21, -2.15724961e-39,  3.97263633e-23,
            7.89485349e-23,  6.66226772e-23, -5.22361363e-39,
            5.00034028e-23,  9.96408460e-26, -1.47474729e-24]]), 'b': np.array([[ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
        [ 1.55826640e-06,  5.19278164e-19,  6.34979367e-21,
            -2.22418601e-06, -2.43389381e-20,  2.84524692e-21,
            -8.30365565e-21, -2.34361237e-21,  3.20355827e-06,
            1.95914168e-21,  4.52420986e-21, -1.70376107e-05,
            -2.01854908e-20, -2.53660577e-05,  4.89411896e-22,
            -9.44961644e-21,  4.32980962e-20, -1.59726992e-05],
        [ 2.25724770e-06,  7.37863505e-19,  6.55755024e-21,
            4.87512369e-06,  6.92780149e-20, -1.26781673e-20,
            1.03224699e-20,  2.60131817e-22,  1.10091512e-06,
            -1.17168117e-20,  7.65822537e-21,  1.54460512e-05,
            2.49104954e-20, -1.03492035e-05,  1.76749231e-22,
            -3.33351803e-21,  7.27415785e-20, -3.66645640e-05],
        [ 2.37573005e-06,  7.88650772e-19, -2.94324807e-21,
            7.68634893e-06,  1.14064560e-19, -2.05457758e-20,
            2.39902953e-20,  3.01459992e-21, -1.15661612e-05,
            2.40016723e-20,  1.56488820e-20, -2.26228108e-05,
            -1.67510511e-20,  3.85636269e-05, -9.28219824e-22,
            2.54235811e-20,  8.45868679e-20, -4.99268512e-05]]), 'g': np.array([[ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
        [ 5.16716066e-19, -1.53987084e-06,  7.05155776e-21,
            2.79740101e-20, -1.96651034e-06, -2.03122907e-20,
            4.16664033e-21, -3.80236422e-21, -1.62650411e-20,
            -3.23072274e-06, -2.26557161e-21,  2.03072489e-20,
            -1.67664943e-05,  3.11229349e-20,  1.80515702e-21,
            -2.33421101e-05, -1.38482762e-05, -2.83318529e-20],
        [ 7.42416912e-19, -2.23127000e-06,  1.55394109e-20,
            -7.10867978e-20,  4.76487452e-06,  5.32577988e-20,
            8.85287586e-21, -2.27060953e-21,  4.62825752e-21,
            -8.34035904e-07, -6.04805389e-21, -3.34015603e-20,
            1.41150410e-05,  9.52272539e-21,  7.32640095e-22,
            -8.65414140e-06, -3.28780793e-05, -5.78478197e-20],
        [ 7.74584911e-19, -2.34900025e-06,  6.87621070e-21,
            -1.16288857e-19,  7.44485055e-06,  7.44248687e-20,
            1.16671590e-20,  6.06724473e-21,  1.61793193e-21,
            1.10334879e-05, -8.49822960e-21,  5.11165369e-20,
            -2.20736820e-05, -6.19111765e-20, -2.53756776e-21,
            3.56353637e-05, -3.81859355e-05, -7.05696403e-20]]), 'x': np.array([[ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
        [ 2.93557258e-20, -4.99736084e-21,  1.31704302e-34,
            -1.43641999e-19,  5.67368216e-24,  2.96517633e-34,
            1.16022376e-04,  5.80411995e-35,  8.10064276e-20,
            5.55784121e-21,  2.77777313e-04,  1.56277571e-20,
            -2.82363586e-21, -2.85468106e-20, -1.84450617e-04,
            -9.69365639e-22,  4.87812407e-20,  8.80850325e-20],
        [ 5.86181726e-20, -9.75229886e-21,  2.69692665e-34,
            -2.72640473e-19, -8.56687236e-20,  3.91277361e-34,
            2.00956651e-04,  1.24998782e-34,  1.12622460e-19,
            3.82516632e-21,  5.85137932e-20, -4.78292998e-21,
            5.83244101e-21, -2.14982666e-20,  3.19477840e-04,
            4.19727617e-20,  2.74816626e-20,  1.82519441e-20],
        [ 3.94138020e-20,  0.00000000e+00,  2.22956356e-34,
            -2.19304002e-19,  2.86887474e-20,  6.11537433e-34,
            2.32044753e-04,  5.09614527e-35,  1.41631751e-19,
            -1.43443737e-20, -2.77777313e-04, -2.66120621e-20,
            -3.58609343e-21, -6.20734082e-20, -3.68901233e-04,
            7.17218686e-21,  1.25513270e-19, -2.29638389e-20]]), 'y': np.array([[ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
        [ 1.87296662e-17, -5.49130224e-05, -2.99874112e-20,
            2.33567289e-18, -1.97573627e-04, -2.50297135e-18,
            2.94684004e-20,  2.26163340e-19,  1.09245833e-19,
            2.42774115e-04, -4.39373869e-20, -3.63177535e-20,
            7.36052722e-05,  1.24138801e-19,  5.52941229e-21,
            -8.88172480e-05, -1.09462022e-04, -2.12179915e-19],
        [ 5.91832931e-17, -1.75390334e-04,  6.99691914e-19,
            1.52322148e-18, -1.28402630e-04, -1.44366513e-18,
            -1.82239736e-21, -1.65331231e-20, -2.56333663e-19,
            -2.10171492e-04, -1.64939780e-20, -1.26798950e-19,
            2.54466108e-05, -3.30925813e-19, -1.62157006e-20,
            2.28012293e-04, -7.65915479e-05, -1.07544671e-19],
        [ 1.05487532e-16, -3.16017727e-04,  1.38197649e-18,
            -4.84426479e-18,  2.96151481e-04,  2.83563030e-18,
            1.86551080e-20,  1.38333310e-19, -3.42747645e-20,
            2.77952001e-04, -3.28100720e-21,  6.74928477e-19,
            -2.69749451e-04, -2.44976426e-19, -1.41602299e-20,
            1.86052011e-04,  3.19043001e-05,  5.46073965e-20]]), 'z': np.array([[ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
        [-5.44353349e-05, -1.87991398e-17, -2.32889247e-19,
            1.95868544e-04,  2.47083931e-18, -5.35475056e-19,
            1.65420825e-19,  8.10761412e-20,  2.41941332e-04,
            -1.36360407e-20, -5.66752250e-20, -7.82767123e-05,
            -2.25506380e-19,  8.96980098e-05, -1.49136637e-21,
            8.67781609e-20, -2.07340933e-19,  1.11401484e-04],
        [-1.75383948e-04, -5.89837064e-17, -5.16970123e-19,
            1.30207014e-04,  1.48589973e-18, -1.94222893e-19,
            2.96877919e-19, -6.02507250e-20, -2.09817652e-04,
            3.64564758e-19, -1.76363211e-20, -2.78720363e-05,
            1.63290225e-19, -2.21865426e-04,  5.03580029e-21,
            -1.85122792e-19, -1.01372148e-19,  8.42814952e-05],
        [-3.17218255e-04, -1.06075999e-16, -6.91627633e-19,
            -3.01927373e-04, -4.79277254e-18,  1.03901710e-18,
            -4.65545068e-19, -3.00545728e-20,  2.85306330e-04,
            -8.57754910e-19, -5.23684176e-20,  2.88714458e-04,
            3.39281005e-19, -2.33756657e-04,  5.23605190e-21,
            -1.12999913e-19, -4.39983112e-20,  6.02266626e-05]])}

    
    psd_of_jth_generalized_force = []
    S_Q_jj_i = 0 # jj for jth mode 

    plot_csd = True
    
    f_sample = load_signals['sample_freq'] # default --> TODO: or 1/dt with dt from simulation 
    interpol_difs = []
    for mode_id in range(3):
        for s in load_directions:
            for l in load_directions:
                for i1 in range(n_nodes):
                    for i2 in range(n_nodes):
                        f_j = eig_freqs[mode_id]
                        f, csd = signal.csd(load_signals[s][i1], load_signals[l][i2], f_sample, nperseg= 2048)
                        f_round = np.round(f,2)
                        
                        f_id = np.where(f_round ==np.round(f_j,2))[0]
                        # NOTE: sofar: if more then one rounded f exists then the one that is the closest to f_j is taken
                        # TODO:  maybe find the two closest freqs and then interoplate the csd (np.interpl1d, cubic,...)
                        if len(f_id) > 1:
                            possible_fs = f[f_id[0]:f_id[-1]+1] 
                            difs = abs(possible_fs - f_j)
                            use_id = np.argmin(difs)
                            f_id_closest = f_id[use_id]
                        else:
                            f_id_closest = f_id[0]
                        
                        # find interpolation freq
                        if f_j < f[f_id_closest]:
                            xp = [f[f_id_closest - 1], f[f_id_closest]]
                            yp = [csd[f_id_closest - 1], csd[f_id_closest]]
                        elif f_j > f[f_id_closest]:
                            xp = [f[f_id_closest], f[f_id_closest+1]]
                            yp = [csd[f_id_closest], csd[f_id_closest+1]]

                        csd_f_j = np.interp(f_j, xp, yp)
                        
                        real = ' only real'
                        csd_f_j_close = csd[f_id_closest]  
                        if csd_f_j.imag != 0:
                            #NOTE: this is the phase shift and seems not to be relevant 
                            #print('\nCross power spectral density has imaginary part')
                            real = ' with imaginary part'
                        
                        dif = round((np.real(csd_f_j) - np.real(csd_f_j_close))/np.real(csd_f_j) * 100, 3)
                        interpol_difs.append(dif)

                        # # plot of the CPSD
                        #if dif > 10:
                        if plot_csd:
                            plt.semilogy(f, np.real(csd), label = 'real(csd) at f_j: ' + str(csd_f_j))

                            plt.vlines(f[f_id_closest], 0, max(csd), label = 'colsest f', linestyles='-.', color = 'g')
                            plt.hlines(csd_f_j_close, 0, max(f), label = 'csd of colsest f: ' + str(round(np.real(csd_f_j_close),0)), linestyles='-.', color = 'g')

                            plt.vlines(f_j, 0, max(csd), label = 'natural f', linestyles='--', color = 'r')
                            plt.hlines(csd_f_j, 0, max(f), label = 'csd of interpolated f: '+ str(round(np.real(csd_f_j),0)), linestyles='--', color = 'r')

                            plt.plot(f[0], csd[0],
                             label = 'csd diff: ' + str(round((np.real(csd_f_j) - np.real(csd_f_j_close))/np.real(csd_f_j) * 100, 3)) + ' % of f_j interp')
                            plt.xlabel('frequency')
                            plt.ylabel('CSD ' + 'P_' + s +'_'+ str(i1)+ ' & ' + 'P_' + l +'_'+ str(i2) )
                            plt.title('in mode '+ str(mode_id+1) + ' CSD ' + 'P_' + s +'_'+ str(i1)+ ' & ' + 'P_' + l +'_'+ str(i2) + real)
                            plt.legend()
                            plt.show()

                        # NOTE: taking the real part of the csd (Holmes 3.3.6)
                        S_Q_jj_i += eigenform[s][:,mode_id][i1]*\
                                    eigenform[l][:,mode_id][i2]*\
                                    np.real(csd_f_j)
        
        # for each of the first 3 modes 
        psd_of_jth_generalized_force.append(S_Q_jj_i)
    return psd_of_jth_generalized_force

print(power_spectral_density_jth_generalized_force(load_signals))

# # real of csd
# interp: [16.013958063936954, 33.292465303552, 33.32276882627376]
# closest: [15.394909067489909, 32.7342454063081, 32.76456185897277]
# # abs of csd
# interp: [17.316709673516478, 34.6047028098994, 34.635746534450476]

# # # spatial distribution of z for My 
# # real of csd
# closest
fz_close =  [np.array([     0.        , 396914.68034412, 198457.34017206, 132304.89344804]),
                np.array([0.00000000e+00, 2.46335584e-07, 1.23167792e-07, 8.21118615e-08]), 
                np.array([0.00000000e+00, 3.84698531e-08, 1.92349266e-08, 1.28232844e-08])]
# interp
fz_interp =  [np.array([     0.        , 403989.95271379, 201994.97635689, 134663.31757126]), 
               np.array([0.00000000e+00, 2.48081500e-07, 1.24040750e-07, 8.26938332e-08]), 
               np.array([0.00000000e+00, 3.87423162e-08, 1.93711581e-08, 1.29141054e-08])]

for i, f in enumerate(fz_close):
    print ('diff interp - close:')
    print (fz_interp[i] - f)

fz_close_res = np.array([0.0, 1302228.84231691, 651114.4211584548, 434076.2807723033])
fz_close_total = np.array([8328394.266660187, 17138458.998042848, 14221081.077597575, 5806685.740516461])

fz_interp_res = np.array([0.0, 1325441.9582710234, 662720.9791355117, 441813.98609034123])
fz_interp_total = np.array([ 8182779.55048923, 16884882.32391556, 13995265.69112286, 5720380.28252574])

print ('\nresonant diff interp - close')
print (fz_interp_res -fz_close_res)
print ('\ntotal diff interp - close')
print (fz_interp_total - fz_close_total)