import numpy as np
from scipy import linalg
import matplotlib.pyplot as plt


DOFS_PER_NODE = {'2D': 3,
                 '3D': 6}

DOF_LABELS = {'2D': ['x', 'y', 'g'],
              '3D': ['x', 'y', 'z', 'a', 'b', 'g']}

colors = ['#1f77b4', '#1f77b4', '#ff7f0e','#ff7f0e', "#2ca02c", "#2ca02c"]

domain_size = '3D'
levels = np.array([80.0, 160.0, 240.0])
level_factor = 300


'''
Beschreibung:
comp_k und comp_m sind vom ParOptBeam kopiert nachdem die schon vonrhanden Optimierungen gelaufen sind -> mit 3 elementen.
Mit diesen Matrizen wird eine Eigenwertanalyse durchgeführt.
Der Funktion factorization werden 2 Faktoren übergeben und spezifizierte Einträge in der Steifigkeits bzw Masse matrix multipliziert.
Danach werden wieder eigenwerte und vektoren berechnet. 
Diese Funktion wird für verschiedene Faktoren ausgewertet. 
Die ersten 3 Frequenzen und die werte des 1. Eigenvektors an den 3 Verschieblichen Knoten des Beam models werden geplotet.
Man sieht den Einfluss einzelner Einträge der Matrizen auf die Änderung von Eigenvektoren und Werten.
'''

variables_available = ['K','K_11','K_6','M', 'M_11','M_6', 'M_-6' ]
'''
K: die komplette comp_K matrix ist multipliziert
K_11: comp_K[1][1] 
K_6: comp_K[:6,:6]
--> dasselbe gilt für M
M_-6: comp_m[-6:,-6:] --> die letzten 6*6 einträge werden multipliziert
'''
# setting of variables and factors to plot 
# eine Variable wird geändert
const_factor = 0.1

# eine 2. variable wird mit verschiedenen werten geändert
# --> Ziel ist rauszufinden ob dadurch frequenzen und eigenfromen auch wieder geändert werden

#factors = np.linspace(1.1,1,200)
factors = np.linspace(1,20,50)
second_factor = False # wenn True werden für beide variablen die linspace factoren verwendet

const_var = 'K_11'
variable_to_change = 'M'
 
def factorization (const_factor, var_factor ,const_var, var_var = None):

    comp_k = np.array([[ 1.23595200e+10,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            -6.17976000e+09,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
        [ 0.00000000e+00,  1.14023717e+09,  0.00000000e+00,
            -1.14023717e+11,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00, -5.70118583e+08,  0.00000000e+00,
            5.70118583e+10,  0.00000000e+00,  2.28047433e+10,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
        [ 0.00000000e+00,  0.00000000e+00,  3.44413727e+08,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00, -1.72206863e+08,
            0.00000000e+00, -6.88827453e+09,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
        [ 0.00000000e+00, -1.14023717e+11,  0.00000000e+00,
            2.35884089e+13,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  5.70118583e+10,  0.00000000e+00,
            -5.72680374e+12,  0.00000000e+00, -2.28047433e+12,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
        [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  2.12089050e+12,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  6.88827453e+09,
            0.00000000e+00,  1.64772350e+11,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
        [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  2.62691526e+12,
            0.00000000e+00, -2.28047433e+10,  0.00000000e+00,
            2.28047433e+12,  0.00000000e+00,  5.10921838e+11,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
        [-6.17976000e+09,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            1.23595200e+10,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            -6.17976000e+09,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
        [ 0.00000000e+00, -5.70118583e+08,  0.00000000e+00,
            5.70118583e+10,  0.00000000e+00, -2.28047433e+10,
            0.00000000e+00,  1.14023717e+09,  0.00000000e+00,
            -1.14023717e+11,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00, -5.70118583e+08,  0.00000000e+00,
            5.70118583e+10,  0.00000000e+00,  2.28047433e+10],
        [ 0.00000000e+00,  0.00000000e+00, -1.72206863e+08,
            0.00000000e+00,  6.88827453e+09,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  3.44413727e+08,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00, -1.72206863e+08,
            0.00000000e+00, -6.88827453e+09,  0.00000000e+00],
        [ 0.00000000e+00,  5.70118583e+10,  0.00000000e+00,
            -5.72680374e+12,  0.00000000e+00,  2.28047433e+12,
            0.00000000e+00, -1.14023717e+11,  0.00000000e+00,
            2.55044302e+13,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  5.70118583e+10,  0.00000000e+00,
            -5.72680374e+12,  0.00000000e+00, -2.28047433e+12],
        [ 0.00000000e+00,  0.00000000e+00, -6.88827453e+09,
            0.00000000e+00,  1.64772350e+11,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  2.33378175e+12,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  6.88827453e+09,
            0.00000000e+00,  1.64772350e+11,  0.00000000e+00],
        [ 0.00000000e+00,  2.28047433e+10,  0.00000000e+00,
            -2.28047433e+12,  0.00000000e+00,  5.10921838e+11,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  2.62691526e+12,
            0.00000000e+00, -2.28047433e+10,  0.00000000e+00,
            2.28047433e+12,  0.00000000e+00,  5.10921838e+11],
        [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            -6.17976000e+09,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            6.17976000e+09,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
        [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00, -5.70118583e+08,  0.00000000e+00,
            5.70118583e+10,  0.00000000e+00, -2.28047433e+10,
            0.00000000e+00,  5.70118583e+08,  0.00000000e+00,
            -5.70118583e+10,  0.00000000e+00, -2.28047433e+10],
        [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00, -1.72206863e+08,
            0.00000000e+00,  6.88827453e+09,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  1.72206863e+08,
            0.00000000e+00,  6.88827453e+09,  0.00000000e+00],
        [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  5.70118583e+10,  0.00000000e+00,
            -5.72680374e+12,  0.00000000e+00,  2.28047433e+12,
            0.00000000e+00, -5.70118583e+10,  0.00000000e+00,
            1.01762309e+13,  0.00000000e+00,  2.28047433e+12],
        [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00, -6.88827453e+09,
            0.00000000e+00,  1.64772350e+11,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  6.88827453e+09,
            0.00000000e+00,  8.80670412e+11,  0.00000000e+00],
        [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  2.28047433e+10,  0.00000000e+00,
            -2.28047433e+12,  0.00000000e+00,  5.10921838e+11,
            0.00000000e+00, -2.28047433e+10,  0.00000000e+00,
            2.28047433e+12,  0.00000000e+00,  1.31345763e+12]])

    comp_m = np.array([[ 2.94917040e+06,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            7.37292601e+05,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
        [ 0.00000000e+00,  3.25868766e+06,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  5.82533972e+05,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00, -1.21506492e+07,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
        [ 0.00000000e+00,  0.00000000e+00,  3.24313658e+06,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  5.90309510e+05,
            0.00000000e+00,  1.17229617e+07,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
        [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            2.44354715e+08,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            6.10886786e+07,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
        [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  5.38041226e+08,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00, -1.17229617e+07,
            0.00000000e+00, -2.16061003e+08,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
        [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  5.83369413e+08,
            0.00000000e+00,  1.21506492e+07,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00, -2.28056885e+08,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
        [ 7.37292601e+05,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            2.94917040e+06,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            7.37292601e+05,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
        [ 0.00000000e+00,  5.82533972e+05,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  1.21506492e+07,
            0.00000000e+00,  3.25868766e+06,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  5.82533972e+05,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00, -1.21506492e+07],
        [ 0.00000000e+00,  0.00000000e+00,  5.90309510e+05,
            0.00000000e+00, -1.17229617e+07,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  3.24313658e+06,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  5.90309510e+05,
            0.00000000e+00,  1.17229617e+07,  0.00000000e+00],
        [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            6.10886786e+07,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            2.44354715e+08,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            6.10886786e+07,  0.00000000e+00,  0.00000000e+00],
        [ 0.00000000e+00,  0.00000000e+00,  1.17229617e+07,
            0.00000000e+00, -2.16061003e+08,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  5.38041226e+08,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00, -1.17229617e+07,
            0.00000000e+00, -2.16061003e+08,  0.00000000e+00],
        [ 0.00000000e+00, -1.21506492e+07,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00, -2.28056885e+08,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  5.83369413e+08,
            0.00000000e+00,  1.21506492e+07,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00, -2.28056885e+08],
        [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            7.37292601e+05,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            1.47458520e+06,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
        [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  5.82533972e+05,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  1.21506492e+07,
            0.00000000e+00,  1.62934383e+06,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00, -1.73410548e+07],
        [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  5.90309510e+05,
            0.00000000e+00, -1.17229617e+07,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  1.62156829e+06,
            0.00000000e+00,  1.77687423e+07,  0.00000000e+00],
        [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            6.10886786e+07,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            1.22177357e+08,  0.00000000e+00,  0.00000000e+00],
        [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  1.17229617e+07,
            0.00000000e+00, -2.16061003e+08,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  1.77687423e+07,
            0.00000000e+00,  2.69020613e+08,  0.00000000e+00],
        [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
            0.00000000e+00, -1.21506492e+07,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00, -2.28056885e+08,
            0.00000000e+00, -1.73410548e+07,  0.00000000e+00,
            0.00000000e+00,  0.00000000e+00,  2.91684706e+08]])

# constant variable factorization
    if const_var == 'K':
        comp_k *= const_factor
    elif const_var == 'K_11':
        comp_k[1][1] *= const_factor
    elif const_var == 'K_6':
        comp_k[:6,:6] *= const_factor
    elif const_var == 'M':
        comp_m *= const_factor
    elif const_var == 'M_11':
        comp_m[1][1] *=const_factor
    elif const_var == 'M_6':
        comp_m[:6,:6] *= const_factor
    elif const_var == 'M_-6':
        comp_m[-6:,-6:] *= const_factor

# changing variable factorization
    if var_var == 'K':
        comp_k *= var_factor
    elif var_var == 'K_11':
        comp_k[1][1] *= var_factor
    elif var_var == 'K_6':
        comp_k[:6,:6] *= var_factor
    elif var_var == 'M':
        comp_m *= var_factor
    elif var_var == 'M_11':
        comp_m[1][1] *=var_factor
    elif var_var == 'M_6':
        comp_m[:6,:6] *= var_factor
    elif var_var == 'M_-6':
        comp_m[-6:,-6:] *= var_factor

# computation of eigenvalues and vectors   
    eigvalues_raw, eigen_modes_raw = linalg.eigh(comp_k, comp_m)

    eigvalues = np.sqrt(np.real(eigvalues_raw))
    eig_freqs = eigvalues /2./np.pi

    mode_id = 0 
    dof_label = 'y'

    start = DOF_LABELS[domain_size].index(dof_label)
    step = DOFS_PER_NODE[domain_size]
    stop = eigvalues_raw.shape[0] + start - step

    # return eigenfreqs and the eigenform of the first mode
    eig_form = eigen_modes_raw[start:stop+1:step][:, mode_id]

    if eig_form[1] < 0:
        eig_form *= -1

    return eig_freqs, eig_form

# the original values with nothing changed [freq, phi, f,phi,...]
origin = [0.23099993404177824, 9.198036040538999e-05, 0.4289999827897454,-0.00029979455002958593, 1.2639517004152314,  0.0005466425267693131]

# call of the function and evaluation with the different factors
eigen_results = {}
# phi_i ist der wert des eigenvectors am knoten i

for i in range(3):
    eigen_results['f mode_'+str(i)] = np.zeros(len(factors))
    eigen_results['phi node_'+str(i)]  = np.zeros(len(factors))
for j, fac in enumerate(factors):
    if second_factor:
        const_factor = fac
    for i in range(3):
        eigen_results['f mode_'+str(i)][j] = factorization(const_factor, fac, const_var, variable_to_change)[0][i] 
        eigen_results['phi node_'+str(i)][j]  = factorization(const_factor, fac, const_var, variable_to_change)[1][i] + levels[i]/levels[-1]/level_factor

# plot 
fig, ax = plt.subplots(1,2)

l = [0,0,1,1,2,2]
for i, key in enumerate(eigen_results):
    if key[0] == 'f':
        ax_j = ax[0] 
        level = 0.0 
    else:
        ax_j = ax[1]
        level = levels[l[i]]/levels[-1]/level_factor
    ax_j.plot(factors, eigen_results[key], label = key)
    ax_j.hlines(origin[i]+ level, factors[0],factors[-1], 
                label = key + ' origin', 
                linestyles = 'dashed',
                color = colors[i])    

for axis in ax:
    axis.grid()
    axis.legend()
    axis.set_xlabel('factor ' + variable_to_change)


title = const_var + ' as ' + str(const_factor) +' '+ variable_to_change + ' as factor'
if second_factor:
    title = const_var + ' and ' + variable_to_change + ' as factor'

ax[0].set_title('eigenfrequencies first 3 modes')
ax[0].set_ylabel('freq')
ax[1].set_title('eigenform of 1st mode')
fig.suptitle(title)
ax[1].set_ylabel('amplitude')
plt.show()

print ('factor constant', const_var, ':',str(const_factor))
print ('factor changing: ', variable_to_change, 'from', str(min(factors)), 'to', str(max(factors)))
